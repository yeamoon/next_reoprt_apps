name: CI/CD Pipeline to Build Docker Image and Deploy to GCP VM

on:
  push:
    branches:
      - main  # Trigger on push to the main branch
  pull_request:
    branches:
      - main  # Trigger on pull request to the main branch

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Step 3: Build the Docker image
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/report-app:${{ github.sha }} .

      # Step 4: Authenticate with Docker Hub (or any other registry)
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 5: Push Docker image to Docker Hub (or other registry)
      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/report-app:${{ github.sha }}

     # Step 3: Authenticate with Google Cloud
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}  # Your service account key stored in GitHub Secrets

      # Step 4: Set up Google Cloud CLI
      - name: Set up Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}


      # Step 7: Deploy Docker image to Google Cloud VM
      - name: Deploy Docker image to GCP VM
        run: |
          gcloud compute ssh docker-vm1 --zone=${{ secrets.GCP_ZONE }} --command="
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/report-app:${{ github.sha }} &&
            sudo docker run -d -p 3000:3000 ${{ secrets.DOCKER_USERNAME }}/report-app:${{ github.sha }}"
      
      - name: Run Smoke Tests (Check if app is up)
        run: |
          IP_ADDRESS=$(gcloud compute instances describe docker-vm1 --zone=${{ secrets.GCP_ZONE }} --format="get(networkInterfaces[0].accessConfigs[0].natIP)")
          echo "Checking if app is running at http://$IP_ADDRESS"

          for i in {1..10}; do
            if curl --silent --fail http://$IP_ADDRESS; then
              echo "App is running!"
              exit 0
            else
              echo "App is not ready yet. Retrying in 5 seconds..."
              sleep 5
            fi
          done

          echo "App failed to respond after multiple attempts."
          exit 1

